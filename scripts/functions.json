{
    "ACOS": {
        "prototype": "TA_RetCode TA_ACOS( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Trigonometric ACos",
            "group": "Math Transform",
            "name": "ACOS",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_ACOS": {
        "prototype": "TA_RetCode TA_S_ACOS( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "ACOS_Lookback": {
        "prototype": "int TA_ACOS_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "AD": {
        "prototype": "TA_RetCode TA_AD( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], const double inVolume[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Chaikin A/D Line",
            "group": "Volume Indicators",
            "name": "AD",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close",
                    "volume"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_AD": {
        "prototype": "TA_RetCode TA_S_AD( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], const float inVolume[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "AD_Lookback": {
        "prototype": "int TA_AD_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "ADD": {
        "prototype": "TA_RetCode TA_ADD( int startIdx, int endIdx, const double inReal0[], const double inReal1[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Arithmetic Add",
            "group": "Math Operators",
            "name": "ADD",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price0": "high",
                "price1": "low"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_ADD": {
        "prototype": "TA_RetCode TA_S_ADD( int startIdx, int endIdx, const float inReal0[], const float inReal1[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "ADD_Lookback": {
        "prototype": "int TA_ADD_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "ADOSC": {
        "prototype": "TA_RetCode TA_ADOSC( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], const double inVolume[], int optInFastPeriod, int optInSlowPeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Chaikin A/D Oscillator",
            "group": "Volume Indicators",
            "name": "ADOSC",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close",
                    "volume"
                ]
            },
            "parameters": {
                "fastperiod": 3,
                "slowperiod": 10
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_ADOSC": {
        "prototype": "TA_RetCode TA_S_ADOSC( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], const float inVolume[], int optInFastPeriod, int optInSlowPeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "ADOSC_Lookback": {
        "prototype": "int TA_ADOSC_Lookback( int optInFastPeriod, int optInSlowPeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "ADX": {
        "prototype": "TA_RetCode TA_ADX( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Average Directional Movement Index",
            "group": "Momentum Indicators",
            "name": "ADX",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_ADX": {
        "prototype": "TA_RetCode TA_S_ADX( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "ADX_Lookback": {
        "prototype": "int TA_ADX_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "ADXR": {
        "prototype": "TA_RetCode TA_ADXR( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Average Directional Movement Index Rating",
            "group": "Momentum Indicators",
            "name": "ADXR",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_ADXR": {
        "prototype": "TA_RetCode TA_S_ADXR( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "ADXR_Lookback": {
        "prototype": "int TA_ADXR_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "APO": {
        "prototype": "TA_RetCode TA_APO( int startIdx, int endIdx, const double inReal[], int optInFastPeriod, int optInSlowPeriod, TA_MAType optInMAType, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Absolute Price Oscillator",
            "group": "Momentum Indicators",
            "name": "APO",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "fastperiod": 12,
                "slowperiod": 26,
                "matype": 0
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_APO": {
        "prototype": "TA_RetCode TA_S_APO( int startIdx, int endIdx, const float inReal[], int optInFastPeriod, int optInSlowPeriod, TA_MAType optInMAType, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "APO_Lookback": {
        "prototype": "int TA_APO_Lookback( int optInFastPeriod, int optInSlowPeriod, TA_MAType optInMAType );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "AROON": {
        "prototype": "TA_RetCode TA_AROON( int startIdx, int endIdx, const double inHigh[], const double inLow[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outAroonDown[], double outAroonUp[] );",
        "is_float": false,
        "info": {
            "display_name": "Aroon",
            "group": "Momentum Indicators",
            "name": "AROON",
            "function_flags": null,
            "output_flags": {
                "aroondown": [
                    "Dashed Line"
                ],
                "aroonup": [
                    "Line"
                ]
            },
            "output_names": [
                "aroondown",
                "aroonup"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low"
                ]
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_AROON": {
        "prototype": "TA_RetCode TA_S_AROON( int startIdx, int endIdx, const float inHigh[], const float inLow[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outAroonDown[], double outAroonUp[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "AROON_Lookback": {
        "prototype": "int TA_AROON_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "AROONOSC": {
        "prototype": "TA_RetCode TA_AROONOSC( int startIdx, int endIdx, const double inHigh[], const double inLow[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Aroon Oscillator",
            "group": "Momentum Indicators",
            "name": "AROONOSC",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low"
                ]
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_AROONOSC": {
        "prototype": "TA_RetCode TA_S_AROONOSC( int startIdx, int endIdx, const float inHigh[], const float inLow[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "AROONOSC_Lookback": {
        "prototype": "int TA_AROONOSC_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "ASIN": {
        "prototype": "TA_RetCode TA_ASIN( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Trigonometric ASin",
            "group": "Math Transform",
            "name": "ASIN",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_ASIN": {
        "prototype": "TA_RetCode TA_S_ASIN( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "ASIN_Lookback": {
        "prototype": "int TA_ASIN_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "ATAN": {
        "prototype": "TA_RetCode TA_ATAN( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Trigonometric ATan",
            "group": "Math Transform",
            "name": "ATAN",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_ATAN": {
        "prototype": "TA_RetCode TA_S_ATAN( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "ATAN_Lookback": {
        "prototype": "int TA_ATAN_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "ATR": {
        "prototype": "TA_RetCode TA_ATR( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Average True Range",
            "group": "Volatility Indicators",
            "name": "ATR",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_ATR": {
        "prototype": "TA_RetCode TA_S_ATR( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "ATR_Lookback": {
        "prototype": "int TA_ATR_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "AVGPRICE": {
        "prototype": "TA_RetCode TA_AVGPRICE( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Average Price",
            "group": "Price Transform",
            "name": "AVGPRICE",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_AVGPRICE": {
        "prototype": "TA_RetCode TA_S_AVGPRICE( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "AVGPRICE_Lookback": {
        "prototype": "int TA_AVGPRICE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "BBANDS": {
        "prototype": "TA_RetCode TA_BBANDS( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, double optInNbDevUp, double optInNbDevDn, TA_MAType optInMAType, int *outBegIdx, int *outNBElement, double outRealUpperBand[], double outRealMiddleBand[], double outRealLowerBand[] );",
        "is_float": false,
        "info": {
            "display_name": "Bollinger Bands",
            "group": "Overlap Studies",
            "name": "BBANDS",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "upperband": [
                    "Values represent an upper limit"
                ],
                "middleband": [
                    "Line"
                ],
                "lowerband": [
                    "Values represent a lower limit"
                ]
            },
            "output_names": [
                "upperband",
                "middleband",
                "lowerband"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 5,
                "nbdevup": 2,
                "nbdevdn": 2,
                "matype": 0
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_BBANDS": {
        "prototype": "TA_RetCode TA_S_BBANDS( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, double optInNbDevUp, double optInNbDevDn, TA_MAType optInMAType, int *outBegIdx, int *outNBElement, double outRealUpperBand[], double outRealMiddleBand[], double outRealLowerBand[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "BBANDS_Lookback": {
        "prototype": "int TA_BBANDS_Lookback( int optInTimePeriod, double optInNbDevUp, double optInNbDevDn, TA_MAType optInMAType );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "BETA": {
        "prototype": "TA_RetCode TA_BETA( int startIdx, int endIdx, const double inReal0[], const double inReal1[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Beta",
            "group": "Statistic Functions",
            "name": "BETA",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price0": "high",
                "price1": "low"
            },
            "parameters": {
                "timeperiod": 5
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_BETA": {
        "prototype": "TA_RetCode TA_S_BETA( int startIdx, int endIdx, const float inReal0[], const float inReal1[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "BETA_Lookback": {
        "prototype": "int TA_BETA_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "BOP": {
        "prototype": "TA_RetCode TA_BOP( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Balance Of Power",
            "group": "Momentum Indicators",
            "name": "BOP",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_BOP": {
        "prototype": "TA_RetCode TA_S_BOP( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "BOP_Lookback": {
        "prototype": "int TA_BOP_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CCI": {
        "prototype": "TA_RetCode TA_CCI( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Commodity Channel Index",
            "group": "Momentum Indicators",
            "name": "CCI",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CCI": {
        "prototype": "TA_RetCode TA_S_CCI( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CCI_Lookback": {
        "prototype": "int TA_CCI_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDL2CROWS": {
        "prototype": "TA_RetCode TA_CDL2CROWS( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Two Crows",
            "group": "Pattern Recognition",
            "name": "CDL2CROWS",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDL2CROWS": {
        "prototype": "TA_RetCode TA_S_CDL2CROWS( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDL2CROWS_Lookback": {
        "prototype": "int TA_CDL2CROWS_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDL3BLACKCROWS": {
        "prototype": "TA_RetCode TA_CDL3BLACKCROWS( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Three Black Crows",
            "group": "Pattern Recognition",
            "name": "CDL3BLACKCROWS",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDL3BLACKCROWS": {
        "prototype": "TA_RetCode TA_S_CDL3BLACKCROWS( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDL3BLACKCROWS_Lookback": {
        "prototype": "int TA_CDL3BLACKCROWS_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDL3INSIDE": {
        "prototype": "TA_RetCode TA_CDL3INSIDE( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Three Inside Up/Down",
            "group": "Pattern Recognition",
            "name": "CDL3INSIDE",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDL3INSIDE": {
        "prototype": "TA_RetCode TA_S_CDL3INSIDE( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDL3INSIDE_Lookback": {
        "prototype": "int TA_CDL3INSIDE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDL3LINESTRIKE": {
        "prototype": "TA_RetCode TA_CDL3LINESTRIKE( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Three-Line Strike ",
            "group": "Pattern Recognition",
            "name": "CDL3LINESTRIKE",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDL3LINESTRIKE": {
        "prototype": "TA_RetCode TA_S_CDL3LINESTRIKE( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDL3LINESTRIKE_Lookback": {
        "prototype": "int TA_CDL3LINESTRIKE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDL3OUTSIDE": {
        "prototype": "TA_RetCode TA_CDL3OUTSIDE( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Three Outside Up/Down",
            "group": "Pattern Recognition",
            "name": "CDL3OUTSIDE",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDL3OUTSIDE": {
        "prototype": "TA_RetCode TA_S_CDL3OUTSIDE( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDL3OUTSIDE_Lookback": {
        "prototype": "int TA_CDL3OUTSIDE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDL3STARSINSOUTH": {
        "prototype": "TA_RetCode TA_CDL3STARSINSOUTH( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Three Stars In The South",
            "group": "Pattern Recognition",
            "name": "CDL3STARSINSOUTH",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDL3STARSINSOUTH": {
        "prototype": "TA_RetCode TA_S_CDL3STARSINSOUTH( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDL3STARSINSOUTH_Lookback": {
        "prototype": "int TA_CDL3STARSINSOUTH_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDL3WHITESOLDIERS": {
        "prototype": "TA_RetCode TA_CDL3WHITESOLDIERS( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Three Advancing White Soldiers",
            "group": "Pattern Recognition",
            "name": "CDL3WHITESOLDIERS",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDL3WHITESOLDIERS": {
        "prototype": "TA_RetCode TA_S_CDL3WHITESOLDIERS( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDL3WHITESOLDIERS_Lookback": {
        "prototype": "int TA_CDL3WHITESOLDIERS_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLABANDONEDBABY": {
        "prototype": "TA_RetCode TA_CDLABANDONEDBABY( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], double optInPenetration, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Abandoned Baby",
            "group": "Pattern Recognition",
            "name": "CDLABANDONEDBABY",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "penetration": 0.3
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLABANDONEDBABY": {
        "prototype": "TA_RetCode TA_S_CDLABANDONEDBABY( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], double optInPenetration, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLABANDONEDBABY_Lookback": {
        "prototype": "int TA_CDLABANDONEDBABY_Lookback( double optInPenetration );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLADVANCEBLOCK": {
        "prototype": "TA_RetCode TA_CDLADVANCEBLOCK( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Advance Block",
            "group": "Pattern Recognition",
            "name": "CDLADVANCEBLOCK",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLADVANCEBLOCK": {
        "prototype": "TA_RetCode TA_S_CDLADVANCEBLOCK( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLADVANCEBLOCK_Lookback": {
        "prototype": "int TA_CDLADVANCEBLOCK_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLBELTHOLD": {
        "prototype": "TA_RetCode TA_CDLBELTHOLD( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Belt-hold",
            "group": "Pattern Recognition",
            "name": "CDLBELTHOLD",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLBELTHOLD": {
        "prototype": "TA_RetCode TA_S_CDLBELTHOLD( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLBELTHOLD_Lookback": {
        "prototype": "int TA_CDLBELTHOLD_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLBREAKAWAY": {
        "prototype": "TA_RetCode TA_CDLBREAKAWAY( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Breakaway",
            "group": "Pattern Recognition",
            "name": "CDLBREAKAWAY",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLBREAKAWAY": {
        "prototype": "TA_RetCode TA_S_CDLBREAKAWAY( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLBREAKAWAY_Lookback": {
        "prototype": "int TA_CDLBREAKAWAY_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLCLOSINGMARUBOZU": {
        "prototype": "TA_RetCode TA_CDLCLOSINGMARUBOZU( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Closing Marubozu",
            "group": "Pattern Recognition",
            "name": "CDLCLOSINGMARUBOZU",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLCLOSINGMARUBOZU": {
        "prototype": "TA_RetCode TA_S_CDLCLOSINGMARUBOZU( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLCLOSINGMARUBOZU_Lookback": {
        "prototype": "int TA_CDLCLOSINGMARUBOZU_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLCONCEALBABYSWALL": {
        "prototype": "TA_RetCode TA_CDLCONCEALBABYSWALL( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Concealing Baby Swallow",
            "group": "Pattern Recognition",
            "name": "CDLCONCEALBABYSWALL",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLCONCEALBABYSWALL": {
        "prototype": "TA_RetCode TA_S_CDLCONCEALBABYSWALL( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLCONCEALBABYSWALL_Lookback": {
        "prototype": "int TA_CDLCONCEALBABYSWALL_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLCOUNTERATTACK": {
        "prototype": "TA_RetCode TA_CDLCOUNTERATTACK( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Counterattack",
            "group": "Pattern Recognition",
            "name": "CDLCOUNTERATTACK",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLCOUNTERATTACK": {
        "prototype": "TA_RetCode TA_S_CDLCOUNTERATTACK( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLCOUNTERATTACK_Lookback": {
        "prototype": "int TA_CDLCOUNTERATTACK_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLDARKCLOUDCOVER": {
        "prototype": "TA_RetCode TA_CDLDARKCLOUDCOVER( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], double optInPenetration, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Dark Cloud Cover",
            "group": "Pattern Recognition",
            "name": "CDLDARKCLOUDCOVER",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "penetration": 0.5
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLDARKCLOUDCOVER": {
        "prototype": "TA_RetCode TA_S_CDLDARKCLOUDCOVER( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], double optInPenetration, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLDARKCLOUDCOVER_Lookback": {
        "prototype": "int TA_CDLDARKCLOUDCOVER_Lookback( double optInPenetration );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLDOJI": {
        "prototype": "TA_RetCode TA_CDLDOJI( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Doji",
            "group": "Pattern Recognition",
            "name": "CDLDOJI",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLDOJI": {
        "prototype": "TA_RetCode TA_S_CDLDOJI( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLDOJI_Lookback": {
        "prototype": "int TA_CDLDOJI_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLDOJISTAR": {
        "prototype": "TA_RetCode TA_CDLDOJISTAR( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Doji Star",
            "group": "Pattern Recognition",
            "name": "CDLDOJISTAR",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLDOJISTAR": {
        "prototype": "TA_RetCode TA_S_CDLDOJISTAR( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLDOJISTAR_Lookback": {
        "prototype": "int TA_CDLDOJISTAR_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLDRAGONFLYDOJI": {
        "prototype": "TA_RetCode TA_CDLDRAGONFLYDOJI( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Dragonfly Doji",
            "group": "Pattern Recognition",
            "name": "CDLDRAGONFLYDOJI",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLDRAGONFLYDOJI": {
        "prototype": "TA_RetCode TA_S_CDLDRAGONFLYDOJI( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLDRAGONFLYDOJI_Lookback": {
        "prototype": "int TA_CDLDRAGONFLYDOJI_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLENGULFING": {
        "prototype": "TA_RetCode TA_CDLENGULFING( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Engulfing Pattern",
            "group": "Pattern Recognition",
            "name": "CDLENGULFING",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLENGULFING": {
        "prototype": "TA_RetCode TA_S_CDLENGULFING( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLENGULFING_Lookback": {
        "prototype": "int TA_CDLENGULFING_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLEVENINGDOJISTAR": {
        "prototype": "TA_RetCode TA_CDLEVENINGDOJISTAR( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], double optInPenetration, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Evening Doji Star",
            "group": "Pattern Recognition",
            "name": "CDLEVENINGDOJISTAR",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "penetration": 0.3
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLEVENINGDOJISTAR": {
        "prototype": "TA_RetCode TA_S_CDLEVENINGDOJISTAR( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], double optInPenetration, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLEVENINGDOJISTAR_Lookback": {
        "prototype": "int TA_CDLEVENINGDOJISTAR_Lookback( double optInPenetration );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLEVENINGSTAR": {
        "prototype": "TA_RetCode TA_CDLEVENINGSTAR( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], double optInPenetration, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Evening Star",
            "group": "Pattern Recognition",
            "name": "CDLEVENINGSTAR",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "penetration": 0.3
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLEVENINGSTAR": {
        "prototype": "TA_RetCode TA_S_CDLEVENINGSTAR( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], double optInPenetration, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLEVENINGSTAR_Lookback": {
        "prototype": "int TA_CDLEVENINGSTAR_Lookback( double optInPenetration );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLGAPSIDESIDEWHITE": {
        "prototype": "TA_RetCode TA_CDLGAPSIDESIDEWHITE( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Up/Down-gap side-by-side white lines",
            "group": "Pattern Recognition",
            "name": "CDLGAPSIDESIDEWHITE",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLGAPSIDESIDEWHITE": {
        "prototype": "TA_RetCode TA_S_CDLGAPSIDESIDEWHITE( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLGAPSIDESIDEWHITE_Lookback": {
        "prototype": "int TA_CDLGAPSIDESIDEWHITE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLGRAVESTONEDOJI": {
        "prototype": "TA_RetCode TA_CDLGRAVESTONEDOJI( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Gravestone Doji",
            "group": "Pattern Recognition",
            "name": "CDLGRAVESTONEDOJI",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLGRAVESTONEDOJI": {
        "prototype": "TA_RetCode TA_S_CDLGRAVESTONEDOJI( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLGRAVESTONEDOJI_Lookback": {
        "prototype": "int TA_CDLGRAVESTONEDOJI_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLHAMMER": {
        "prototype": "TA_RetCode TA_CDLHAMMER( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Hammer",
            "group": "Pattern Recognition",
            "name": "CDLHAMMER",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLHAMMER": {
        "prototype": "TA_RetCode TA_S_CDLHAMMER( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLHAMMER_Lookback": {
        "prototype": "int TA_CDLHAMMER_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLHANGINGMAN": {
        "prototype": "TA_RetCode TA_CDLHANGINGMAN( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Hanging Man",
            "group": "Pattern Recognition",
            "name": "CDLHANGINGMAN",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLHANGINGMAN": {
        "prototype": "TA_RetCode TA_S_CDLHANGINGMAN( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLHANGINGMAN_Lookback": {
        "prototype": "int TA_CDLHANGINGMAN_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLHARAMI": {
        "prototype": "TA_RetCode TA_CDLHARAMI( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Harami Pattern",
            "group": "Pattern Recognition",
            "name": "CDLHARAMI",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLHARAMI": {
        "prototype": "TA_RetCode TA_S_CDLHARAMI( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLHARAMI_Lookback": {
        "prototype": "int TA_CDLHARAMI_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLHARAMICROSS": {
        "prototype": "TA_RetCode TA_CDLHARAMICROSS( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Harami Cross Pattern",
            "group": "Pattern Recognition",
            "name": "CDLHARAMICROSS",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLHARAMICROSS": {
        "prototype": "TA_RetCode TA_S_CDLHARAMICROSS( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLHARAMICROSS_Lookback": {
        "prototype": "int TA_CDLHARAMICROSS_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLHIGHWAVE": {
        "prototype": "TA_RetCode TA_CDLHIGHWAVE( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "High-Wave Candle",
            "group": "Pattern Recognition",
            "name": "CDLHIGHWAVE",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLHIGHWAVE": {
        "prototype": "TA_RetCode TA_S_CDLHIGHWAVE( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLHIGHWAVE_Lookback": {
        "prototype": "int TA_CDLHIGHWAVE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLHIKKAKE": {
        "prototype": "TA_RetCode TA_CDLHIKKAKE( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Hikkake Pattern",
            "group": "Pattern Recognition",
            "name": "CDLHIKKAKE",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLHIKKAKE": {
        "prototype": "TA_RetCode TA_S_CDLHIKKAKE( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLHIKKAKE_Lookback": {
        "prototype": "int TA_CDLHIKKAKE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLHIKKAKEMOD": {
        "prototype": "TA_RetCode TA_CDLHIKKAKEMOD( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Modified Hikkake Pattern",
            "group": "Pattern Recognition",
            "name": "CDLHIKKAKEMOD",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLHIKKAKEMOD": {
        "prototype": "TA_RetCode TA_S_CDLHIKKAKEMOD( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLHIKKAKEMOD_Lookback": {
        "prototype": "int TA_CDLHIKKAKEMOD_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLHOMINGPIGEON": {
        "prototype": "TA_RetCode TA_CDLHOMINGPIGEON( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Homing Pigeon",
            "group": "Pattern Recognition",
            "name": "CDLHOMINGPIGEON",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLHOMINGPIGEON": {
        "prototype": "TA_RetCode TA_S_CDLHOMINGPIGEON( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLHOMINGPIGEON_Lookback": {
        "prototype": "int TA_CDLHOMINGPIGEON_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLIDENTICAL3CROWS": {
        "prototype": "TA_RetCode TA_CDLIDENTICAL3CROWS( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Identical Three Crows",
            "group": "Pattern Recognition",
            "name": "CDLIDENTICAL3CROWS",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLIDENTICAL3CROWS": {
        "prototype": "TA_RetCode TA_S_CDLIDENTICAL3CROWS( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLIDENTICAL3CROWS_Lookback": {
        "prototype": "int TA_CDLIDENTICAL3CROWS_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLINNECK": {
        "prototype": "TA_RetCode TA_CDLINNECK( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "In-Neck Pattern",
            "group": "Pattern Recognition",
            "name": "CDLINNECK",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLINNECK": {
        "prototype": "TA_RetCode TA_S_CDLINNECK( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLINNECK_Lookback": {
        "prototype": "int TA_CDLINNECK_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLINVERTEDHAMMER": {
        "prototype": "TA_RetCode TA_CDLINVERTEDHAMMER( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Inverted Hammer",
            "group": "Pattern Recognition",
            "name": "CDLINVERTEDHAMMER",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLINVERTEDHAMMER": {
        "prototype": "TA_RetCode TA_S_CDLINVERTEDHAMMER( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLINVERTEDHAMMER_Lookback": {
        "prototype": "int TA_CDLINVERTEDHAMMER_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLKICKING": {
        "prototype": "TA_RetCode TA_CDLKICKING( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Kicking",
            "group": "Pattern Recognition",
            "name": "CDLKICKING",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLKICKING": {
        "prototype": "TA_RetCode TA_S_CDLKICKING( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLKICKING_Lookback": {
        "prototype": "int TA_CDLKICKING_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLKICKINGBYLENGTH": {
        "prototype": "TA_RetCode TA_CDLKICKINGBYLENGTH( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Kicking - bull/bear determined by the longer marubozu",
            "group": "Pattern Recognition",
            "name": "CDLKICKINGBYLENGTH",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLKICKINGBYLENGTH": {
        "prototype": "TA_RetCode TA_S_CDLKICKINGBYLENGTH( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLKICKINGBYLENGTH_Lookback": {
        "prototype": "int TA_CDLKICKINGBYLENGTH_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLLADDERBOTTOM": {
        "prototype": "TA_RetCode TA_CDLLADDERBOTTOM( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Ladder Bottom",
            "group": "Pattern Recognition",
            "name": "CDLLADDERBOTTOM",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLLADDERBOTTOM": {
        "prototype": "TA_RetCode TA_S_CDLLADDERBOTTOM( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLLADDERBOTTOM_Lookback": {
        "prototype": "int TA_CDLLADDERBOTTOM_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLLONGLEGGEDDOJI": {
        "prototype": "TA_RetCode TA_CDLLONGLEGGEDDOJI( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Long Legged Doji",
            "group": "Pattern Recognition",
            "name": "CDLLONGLEGGEDDOJI",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLLONGLEGGEDDOJI": {
        "prototype": "TA_RetCode TA_S_CDLLONGLEGGEDDOJI( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLLONGLEGGEDDOJI_Lookback": {
        "prototype": "int TA_CDLLONGLEGGEDDOJI_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLLONGLINE": {
        "prototype": "TA_RetCode TA_CDLLONGLINE( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Long Line Candle",
            "group": "Pattern Recognition",
            "name": "CDLLONGLINE",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLLONGLINE": {
        "prototype": "TA_RetCode TA_S_CDLLONGLINE( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLLONGLINE_Lookback": {
        "prototype": "int TA_CDLLONGLINE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLMARUBOZU": {
        "prototype": "TA_RetCode TA_CDLMARUBOZU( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Marubozu",
            "group": "Pattern Recognition",
            "name": "CDLMARUBOZU",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLMARUBOZU": {
        "prototype": "TA_RetCode TA_S_CDLMARUBOZU( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLMARUBOZU_Lookback": {
        "prototype": "int TA_CDLMARUBOZU_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLMATCHINGLOW": {
        "prototype": "TA_RetCode TA_CDLMATCHINGLOW( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Matching Low",
            "group": "Pattern Recognition",
            "name": "CDLMATCHINGLOW",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLMATCHINGLOW": {
        "prototype": "TA_RetCode TA_S_CDLMATCHINGLOW( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLMATCHINGLOW_Lookback": {
        "prototype": "int TA_CDLMATCHINGLOW_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLMATHOLD": {
        "prototype": "TA_RetCode TA_CDLMATHOLD( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], double optInPenetration, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Mat Hold",
            "group": "Pattern Recognition",
            "name": "CDLMATHOLD",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "penetration": 0.5
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLMATHOLD": {
        "prototype": "TA_RetCode TA_S_CDLMATHOLD( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], double optInPenetration, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLMATHOLD_Lookback": {
        "prototype": "int TA_CDLMATHOLD_Lookback( double optInPenetration );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLMORNINGDOJISTAR": {
        "prototype": "TA_RetCode TA_CDLMORNINGDOJISTAR( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], double optInPenetration, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Morning Doji Star",
            "group": "Pattern Recognition",
            "name": "CDLMORNINGDOJISTAR",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "penetration": 0.3
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLMORNINGDOJISTAR": {
        "prototype": "TA_RetCode TA_S_CDLMORNINGDOJISTAR( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], double optInPenetration, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLMORNINGDOJISTAR_Lookback": {
        "prototype": "int TA_CDLMORNINGDOJISTAR_Lookback( double optInPenetration );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLMORNINGSTAR": {
        "prototype": "TA_RetCode TA_CDLMORNINGSTAR( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], double optInPenetration, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Morning Star",
            "group": "Pattern Recognition",
            "name": "CDLMORNINGSTAR",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "penetration": 0.3
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLMORNINGSTAR": {
        "prototype": "TA_RetCode TA_S_CDLMORNINGSTAR( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], double optInPenetration, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLMORNINGSTAR_Lookback": {
        "prototype": "int TA_CDLMORNINGSTAR_Lookback( double optInPenetration );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLONNECK": {
        "prototype": "TA_RetCode TA_CDLONNECK( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "On-Neck Pattern",
            "group": "Pattern Recognition",
            "name": "CDLONNECK",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLONNECK": {
        "prototype": "TA_RetCode TA_S_CDLONNECK( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLONNECK_Lookback": {
        "prototype": "int TA_CDLONNECK_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLPIERCING": {
        "prototype": "TA_RetCode TA_CDLPIERCING( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Piercing Pattern",
            "group": "Pattern Recognition",
            "name": "CDLPIERCING",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLPIERCING": {
        "prototype": "TA_RetCode TA_S_CDLPIERCING( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLPIERCING_Lookback": {
        "prototype": "int TA_CDLPIERCING_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLRICKSHAWMAN": {
        "prototype": "TA_RetCode TA_CDLRICKSHAWMAN( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Rickshaw Man",
            "group": "Pattern Recognition",
            "name": "CDLRICKSHAWMAN",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLRICKSHAWMAN": {
        "prototype": "TA_RetCode TA_S_CDLRICKSHAWMAN( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLRICKSHAWMAN_Lookback": {
        "prototype": "int TA_CDLRICKSHAWMAN_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLRISEFALL3METHODS": {
        "prototype": "TA_RetCode TA_CDLRISEFALL3METHODS( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Rising/Falling Three Methods",
            "group": "Pattern Recognition",
            "name": "CDLRISEFALL3METHODS",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLRISEFALL3METHODS": {
        "prototype": "TA_RetCode TA_S_CDLRISEFALL3METHODS( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLRISEFALL3METHODS_Lookback": {
        "prototype": "int TA_CDLRISEFALL3METHODS_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLSEPARATINGLINES": {
        "prototype": "TA_RetCode TA_CDLSEPARATINGLINES( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Separating Lines",
            "group": "Pattern Recognition",
            "name": "CDLSEPARATINGLINES",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLSEPARATINGLINES": {
        "prototype": "TA_RetCode TA_S_CDLSEPARATINGLINES( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLSEPARATINGLINES_Lookback": {
        "prototype": "int TA_CDLSEPARATINGLINES_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLSHOOTINGSTAR": {
        "prototype": "TA_RetCode TA_CDLSHOOTINGSTAR( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Shooting Star",
            "group": "Pattern Recognition",
            "name": "CDLSHOOTINGSTAR",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLSHOOTINGSTAR": {
        "prototype": "TA_RetCode TA_S_CDLSHOOTINGSTAR( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLSHOOTINGSTAR_Lookback": {
        "prototype": "int TA_CDLSHOOTINGSTAR_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLSHORTLINE": {
        "prototype": "TA_RetCode TA_CDLSHORTLINE( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Short Line Candle",
            "group": "Pattern Recognition",
            "name": "CDLSHORTLINE",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLSHORTLINE": {
        "prototype": "TA_RetCode TA_S_CDLSHORTLINE( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLSHORTLINE_Lookback": {
        "prototype": "int TA_CDLSHORTLINE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLSPINNINGTOP": {
        "prototype": "TA_RetCode TA_CDLSPINNINGTOP( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Spinning Top",
            "group": "Pattern Recognition",
            "name": "CDLSPINNINGTOP",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLSPINNINGTOP": {
        "prototype": "TA_RetCode TA_S_CDLSPINNINGTOP( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLSPINNINGTOP_Lookback": {
        "prototype": "int TA_CDLSPINNINGTOP_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLSTALLEDPATTERN": {
        "prototype": "TA_RetCode TA_CDLSTALLEDPATTERN( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Stalled Pattern",
            "group": "Pattern Recognition",
            "name": "CDLSTALLEDPATTERN",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLSTALLEDPATTERN": {
        "prototype": "TA_RetCode TA_S_CDLSTALLEDPATTERN( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLSTALLEDPATTERN_Lookback": {
        "prototype": "int TA_CDLSTALLEDPATTERN_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLSTICKSANDWICH": {
        "prototype": "TA_RetCode TA_CDLSTICKSANDWICH( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Stick Sandwich",
            "group": "Pattern Recognition",
            "name": "CDLSTICKSANDWICH",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLSTICKSANDWICH": {
        "prototype": "TA_RetCode TA_S_CDLSTICKSANDWICH( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLSTICKSANDWICH_Lookback": {
        "prototype": "int TA_CDLSTICKSANDWICH_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLTAKURI": {
        "prototype": "TA_RetCode TA_CDLTAKURI( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Takuri (Dragonfly Doji with very long lower shadow)",
            "group": "Pattern Recognition",
            "name": "CDLTAKURI",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLTAKURI": {
        "prototype": "TA_RetCode TA_S_CDLTAKURI( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLTAKURI_Lookback": {
        "prototype": "int TA_CDLTAKURI_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLTASUKIGAP": {
        "prototype": "TA_RetCode TA_CDLTASUKIGAP( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Tasuki Gap",
            "group": "Pattern Recognition",
            "name": "CDLTASUKIGAP",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLTASUKIGAP": {
        "prototype": "TA_RetCode TA_S_CDLTASUKIGAP( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLTASUKIGAP_Lookback": {
        "prototype": "int TA_CDLTASUKIGAP_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLTHRUSTING": {
        "prototype": "TA_RetCode TA_CDLTHRUSTING( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Thrusting Pattern",
            "group": "Pattern Recognition",
            "name": "CDLTHRUSTING",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLTHRUSTING": {
        "prototype": "TA_RetCode TA_S_CDLTHRUSTING( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLTHRUSTING_Lookback": {
        "prototype": "int TA_CDLTHRUSTING_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLTRISTAR": {
        "prototype": "TA_RetCode TA_CDLTRISTAR( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Tristar Pattern",
            "group": "Pattern Recognition",
            "name": "CDLTRISTAR",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLTRISTAR": {
        "prototype": "TA_RetCode TA_S_CDLTRISTAR( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLTRISTAR_Lookback": {
        "prototype": "int TA_CDLTRISTAR_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLUNIQUE3RIVER": {
        "prototype": "TA_RetCode TA_CDLUNIQUE3RIVER( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Unique 3 River",
            "group": "Pattern Recognition",
            "name": "CDLUNIQUE3RIVER",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLUNIQUE3RIVER": {
        "prototype": "TA_RetCode TA_S_CDLUNIQUE3RIVER( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLUNIQUE3RIVER_Lookback": {
        "prototype": "int TA_CDLUNIQUE3RIVER_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLUPSIDEGAP2CROWS": {
        "prototype": "TA_RetCode TA_CDLUPSIDEGAP2CROWS( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Upside Gap Two Crows",
            "group": "Pattern Recognition",
            "name": "CDLUPSIDEGAP2CROWS",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLUPSIDEGAP2CROWS": {
        "prototype": "TA_RetCode TA_S_CDLUPSIDEGAP2CROWS( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLUPSIDEGAP2CROWS_Lookback": {
        "prototype": "int TA_CDLUPSIDEGAP2CROWS_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CDLXSIDEGAP3METHODS": {
        "prototype": "TA_RetCode TA_CDLXSIDEGAP3METHODS( int startIdx, int endIdx, const double inOpen[], const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Upside/Downside Gap Three Methods",
            "group": "Pattern Recognition",
            "name": "CDLXSIDEGAP3METHODS",
            "function_flags": [
                "Output is a candlestick"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "prices": [
                    "open",
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CDLXSIDEGAP3METHODS": {
        "prototype": "TA_RetCode TA_S_CDLXSIDEGAP3METHODS( int startIdx, int endIdx, const float inOpen[], const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CDLXSIDEGAP3METHODS_Lookback": {
        "prototype": "int TA_CDLXSIDEGAP3METHODS_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CEIL": {
        "prototype": "TA_RetCode TA_CEIL( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Ceil",
            "group": "Math Transform",
            "name": "CEIL",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CEIL": {
        "prototype": "TA_RetCode TA_S_CEIL( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CEIL_Lookback": {
        "prototype": "int TA_CEIL_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CMO": {
        "prototype": "TA_RetCode TA_CMO( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Chande Momentum Oscillator",
            "group": "Momentum Indicators",
            "name": "CMO",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CMO": {
        "prototype": "TA_RetCode TA_S_CMO( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CMO_Lookback": {
        "prototype": "int TA_CMO_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "CORREL": {
        "prototype": "TA_RetCode TA_CORREL( int startIdx, int endIdx, const double inReal0[], const double inReal1[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Pearson's Correlation Coefficient (r)",
            "group": "Statistic Functions",
            "name": "CORREL",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price0": "high",
                "price1": "low"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_CORREL": {
        "prototype": "TA_RetCode TA_S_CORREL( int startIdx, int endIdx, const float inReal0[], const float inReal1[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "CORREL_Lookback": {
        "prototype": "int TA_CORREL_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "COS": {
        "prototype": "TA_RetCode TA_COS( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Trigonometric Cos",
            "group": "Math Transform",
            "name": "COS",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_COS": {
        "prototype": "TA_RetCode TA_S_COS( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "COS_Lookback": {
        "prototype": "int TA_COS_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "COSH": {
        "prototype": "TA_RetCode TA_COSH( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Trigonometric Cosh",
            "group": "Math Transform",
            "name": "COSH",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_COSH": {
        "prototype": "TA_RetCode TA_S_COSH( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "COSH_Lookback": {
        "prototype": "int TA_COSH_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "DEMA": {
        "prototype": "TA_RetCode TA_DEMA( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Double Exponential Moving Average",
            "group": "Overlap Studies",
            "name": "DEMA",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_DEMA": {
        "prototype": "TA_RetCode TA_S_DEMA( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "DEMA_Lookback": {
        "prototype": "int TA_DEMA_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "DIV": {
        "prototype": "TA_RetCode TA_DIV( int startIdx, int endIdx, const double inReal0[], const double inReal1[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Arithmetic Div",
            "group": "Math Operators",
            "name": "DIV",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price0": "high",
                "price1": "low"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_DIV": {
        "prototype": "TA_RetCode TA_S_DIV( int startIdx, int endIdx, const float inReal0[], const float inReal1[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "DIV_Lookback": {
        "prototype": "int TA_DIV_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "DX": {
        "prototype": "TA_RetCode TA_DX( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Directional Movement Index",
            "group": "Momentum Indicators",
            "name": "DX",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_DX": {
        "prototype": "TA_RetCode TA_S_DX( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "DX_Lookback": {
        "prototype": "int TA_DX_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "EMA": {
        "prototype": "TA_RetCode TA_EMA( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Exponential Moving Average",
            "group": "Overlap Studies",
            "name": "EMA",
            "function_flags": [
                "Output scale same as input",
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_EMA": {
        "prototype": "TA_RetCode TA_S_EMA( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "EMA_Lookback": {
        "prototype": "int TA_EMA_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "EXP": {
        "prototype": "TA_RetCode TA_EXP( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Arithmetic Exp",
            "group": "Math Transform",
            "name": "EXP",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_EXP": {
        "prototype": "TA_RetCode TA_S_EXP( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "EXP_Lookback": {
        "prototype": "int TA_EXP_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "FLOOR": {
        "prototype": "TA_RetCode TA_FLOOR( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Floor",
            "group": "Math Transform",
            "name": "FLOOR",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_FLOOR": {
        "prototype": "TA_RetCode TA_S_FLOOR( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "FLOOR_Lookback": {
        "prototype": "int TA_FLOOR_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "HT_DCPERIOD": {
        "prototype": "TA_RetCode TA_HT_DCPERIOD( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Hilbert Transform - Dominant Cycle Period",
            "group": "Cycle Indicators",
            "name": "HT_DCPERIOD",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_HT_DCPERIOD": {
        "prototype": "TA_RetCode TA_S_HT_DCPERIOD( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "HT_DCPERIOD_Lookback": {
        "prototype": "int TA_HT_DCPERIOD_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "HT_DCPHASE": {
        "prototype": "TA_RetCode TA_HT_DCPHASE( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Hilbert Transform - Dominant Cycle Phase",
            "group": "Cycle Indicators",
            "name": "HT_DCPHASE",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_HT_DCPHASE": {
        "prototype": "TA_RetCode TA_S_HT_DCPHASE( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "HT_DCPHASE_Lookback": {
        "prototype": "int TA_HT_DCPHASE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "HT_PHASOR": {
        "prototype": "TA_RetCode TA_HT_PHASOR( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outInPhase[], double outQuadrature[] );",
        "is_float": false,
        "info": {
            "display_name": "Hilbert Transform - Phasor Components",
            "group": "Cycle Indicators",
            "name": "HT_PHASOR",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "inphase": [
                    "Line"
                ],
                "quadrature": [
                    "Dashed Line"
                ]
            },
            "output_names": [
                "inphase",
                "quadrature"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_HT_PHASOR": {
        "prototype": "TA_RetCode TA_S_HT_PHASOR( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outInPhase[], double outQuadrature[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "HT_PHASOR_Lookback": {
        "prototype": "int TA_HT_PHASOR_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "HT_SINE": {
        "prototype": "TA_RetCode TA_HT_SINE( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outSine[], double outLeadSine[] );",
        "is_float": false,
        "info": {
            "display_name": "Hilbert Transform - SineWave",
            "group": "Cycle Indicators",
            "name": "HT_SINE",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "sine": [
                    "Line"
                ],
                "leadsine": [
                    "Dashed Line"
                ]
            },
            "output_names": [
                "sine",
                "leadsine"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_HT_SINE": {
        "prototype": "TA_RetCode TA_S_HT_SINE( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outSine[], double outLeadSine[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "HT_SINE_Lookback": {
        "prototype": "int TA_HT_SINE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "HT_TRENDLINE": {
        "prototype": "TA_RetCode TA_HT_TRENDLINE( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Hilbert Transform - Instantaneous Trendline",
            "group": "Overlap Studies",
            "name": "HT_TRENDLINE",
            "function_flags": [
                "Output scale same as input",
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_HT_TRENDLINE": {
        "prototype": "TA_RetCode TA_S_HT_TRENDLINE( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "HT_TRENDLINE_Lookback": {
        "prototype": "int TA_HT_TRENDLINE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "HT_TRENDMODE": {
        "prototype": "TA_RetCode TA_HT_TRENDMODE( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Hilbert Transform - Trend vs Cycle Mode",
            "group": "Cycle Indicators",
            "name": "HT_TRENDMODE",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_HT_TRENDMODE": {
        "prototype": "TA_RetCode TA_S_HT_TRENDMODE( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "HT_TRENDMODE_Lookback": {
        "prototype": "int TA_HT_TRENDMODE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "KAMA": {
        "prototype": "TA_RetCode TA_KAMA( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Kaufman Adaptive Moving Average",
            "group": "Overlap Studies",
            "name": "KAMA",
            "function_flags": [
                "Output scale same as input",
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_KAMA": {
        "prototype": "TA_RetCode TA_S_KAMA( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "KAMA_Lookback": {
        "prototype": "int TA_KAMA_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "LINEARREG": {
        "prototype": "TA_RetCode TA_LINEARREG( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Linear Regression",
            "group": "Statistic Functions",
            "name": "LINEARREG",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_LINEARREG": {
        "prototype": "TA_RetCode TA_S_LINEARREG( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "LINEARREG_Lookback": {
        "prototype": "int TA_LINEARREG_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "LINEARREG_ANGLE": {
        "prototype": "TA_RetCode TA_LINEARREG_ANGLE( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Linear Regression Angle",
            "group": "Statistic Functions",
            "name": "LINEARREG_ANGLE",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_LINEARREG_ANGLE": {
        "prototype": "TA_RetCode TA_S_LINEARREG_ANGLE( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "LINEARREG_ANGLE_Lookback": {
        "prototype": "int TA_LINEARREG_ANGLE_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "LINEARREG_INTERCEPT": {
        "prototype": "TA_RetCode TA_LINEARREG_INTERCEPT( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Linear Regression Intercept",
            "group": "Statistic Functions",
            "name": "LINEARREG_INTERCEPT",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_LINEARREG_INTERCEPT": {
        "prototype": "TA_RetCode TA_S_LINEARREG_INTERCEPT( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "LINEARREG_INTERCEPT_Lookback": {
        "prototype": "int TA_LINEARREG_INTERCEPT_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "LINEARREG_SLOPE": {
        "prototype": "TA_RetCode TA_LINEARREG_SLOPE( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Linear Regression Slope",
            "group": "Statistic Functions",
            "name": "LINEARREG_SLOPE",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_LINEARREG_SLOPE": {
        "prototype": "TA_RetCode TA_S_LINEARREG_SLOPE( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "LINEARREG_SLOPE_Lookback": {
        "prototype": "int TA_LINEARREG_SLOPE_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "LN": {
        "prototype": "TA_RetCode TA_LN( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Log Natural",
            "group": "Math Transform",
            "name": "LN",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_LN": {
        "prototype": "TA_RetCode TA_S_LN( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "LN_Lookback": {
        "prototype": "int TA_LN_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "LOG10": {
        "prototype": "TA_RetCode TA_LOG10( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Log10",
            "group": "Math Transform",
            "name": "LOG10",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_LOG10": {
        "prototype": "TA_RetCode TA_S_LOG10( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "LOG10_Lookback": {
        "prototype": "int TA_LOG10_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MA": {
        "prototype": "TA_RetCode TA_MA( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, TA_MAType optInMAType, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Moving average",
            "group": "Overlap Studies",
            "name": "MA",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30,
                "matype": 0
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MA": {
        "prototype": "TA_RetCode TA_S_MA( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, TA_MAType optInMAType, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MA_Lookback": {
        "prototype": "int TA_MA_Lookback( int optInTimePeriod, TA_MAType optInMAType );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MACD": {
        "prototype": "TA_RetCode TA_MACD( int startIdx, int endIdx, const double inReal[], int optInFastPeriod, int optInSlowPeriod, int optInSignalPeriod, int *outBegIdx, int *outNBElement, double outMACD[], double outMACDSignal[], double outMACDHist[] );",
        "is_float": false,
        "info": {
            "display_name": "Moving Average Convergence/Divergence",
            "group": "Momentum Indicators",
            "name": "MACD",
            "function_flags": null,
            "output_flags": {
                "macd": [
                    "Line"
                ],
                "macdsignal": [
                    "Dashed Line"
                ],
                "macdhist": [
                    "Histogram"
                ]
            },
            "output_names": [
                "macd",
                "macdsignal",
                "macdhist"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "fastperiod": 12,
                "slowperiod": 26,
                "signalperiod": 9
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MACD": {
        "prototype": "TA_RetCode TA_S_MACD( int startIdx, int endIdx, const float inReal[], int optInFastPeriod, int optInSlowPeriod, int optInSignalPeriod, int *outBegIdx, int *outNBElement, double outMACD[], double outMACDSignal[], double outMACDHist[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MACD_Lookback": {
        "prototype": "int TA_MACD_Lookback( int optInFastPeriod, int optInSlowPeriod, int optInSignalPeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MACDEXT": {
        "prototype": "TA_RetCode TA_MACDEXT( int startIdx, int endIdx, const double inReal[], int optInFastPeriod, TA_MAType optInFastMAType, int optInSlowPeriod, TA_MAType optInSlowMAType, int optInSignalPeriod, TA_MAType optInSignalMAType, int *outBegIdx, int *outNBElement, double outMACD[], double outMACDSignal[], double outMACDHist[] );",
        "is_float": false,
        "info": {
            "display_name": "MACD with controllable MA type",
            "group": "Momentum Indicators",
            "name": "MACDEXT",
            "function_flags": null,
            "output_flags": {
                "macd": [
                    "Line"
                ],
                "macdsignal": [
                    "Dashed Line"
                ],
                "macdhist": [
                    "Histogram"
                ]
            },
            "output_names": [
                "macd",
                "macdsignal",
                "macdhist"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "fastperiod": 12,
                "fastmatype": 0,
                "slowperiod": 26,
                "slowmatype": 0,
                "signalperiod": 9,
                "signalmatype": 0
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MACDEXT": {
        "prototype": "TA_RetCode TA_S_MACDEXT( int startIdx, int endIdx, const float inReal[], int optInFastPeriod, TA_MAType optInFastMAType, int optInSlowPeriod, TA_MAType optInSlowMAType, int optInSignalPeriod, TA_MAType optInSignalMAType, int *outBegIdx, int *outNBElement, double outMACD[], double outMACDSignal[], double outMACDHist[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MACDEXT_Lookback": {
        "prototype": "int TA_MACDEXT_Lookback( int optInFastPeriod, TA_MAType optInFastMAType, int optInSlowPeriod, TA_MAType optInSlowMAType, int optInSignalPeriod, TA_MAType optInSignalMAType );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MACDFIX": {
        "prototype": "TA_RetCode TA_MACDFIX( int startIdx, int endIdx, const double inReal[], int optInSignalPeriod, int *outBegIdx, int *outNBElement, double outMACD[], double outMACDSignal[], double outMACDHist[] );",
        "is_float": false,
        "info": {
            "display_name": "Moving Average Convergence/Divergence Fix 12/26",
            "group": "Momentum Indicators",
            "name": "MACDFIX",
            "function_flags": null,
            "output_flags": {
                "macd": [
                    "Line"
                ],
                "macdsignal": [
                    "Dashed Line"
                ],
                "macdhist": [
                    "Histogram"
                ]
            },
            "output_names": [
                "macd",
                "macdsignal",
                "macdhist"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "signalperiod": 9
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MACDFIX": {
        "prototype": "TA_RetCode TA_S_MACDFIX( int startIdx, int endIdx, const float inReal[], int optInSignalPeriod, int *outBegIdx, int *outNBElement, double outMACD[], double outMACDSignal[], double outMACDHist[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MACDFIX_Lookback": {
        "prototype": "int TA_MACDFIX_Lookback( int optInSignalPeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MAMA": {
        "prototype": "TA_RetCode TA_MAMA( int startIdx, int endIdx, const double inReal[], double optInFastLimit, double optInSlowLimit, int *outBegIdx, int *outNBElement, double outMAMA[], double outFAMA[] );",
        "is_float": false,
        "info": {
            "display_name": "MESA Adaptive Moving Average",
            "group": "Overlap Studies",
            "name": "MAMA",
            "function_flags": [
                "Output scale same as input",
                "Function has an unstable period"
            ],
            "output_flags": {
                "mama": [
                    "Line"
                ],
                "fama": [
                    "Dashed Line"
                ]
            },
            "output_names": [
                "mama",
                "fama"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "fastlimit": 0.5,
                "slowlimit": 0.05
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MAMA": {
        "prototype": "TA_RetCode TA_S_MAMA( int startIdx, int endIdx, const float inReal[], double optInFastLimit, double optInSlowLimit, int *outBegIdx, int *outNBElement, double outMAMA[], double outFAMA[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MAMA_Lookback": {
        "prototype": "int TA_MAMA_Lookback( double optInFastLimit, double optInSlowLimit );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MAVP": {
        "prototype": "TA_RetCode TA_MAVP( int startIdx, int endIdx, const double inReal[], const double inPeriods[], int optInMinPeriod, int optInMaxPeriod, TA_MAType optInMAType, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Moving average with variable period",
            "group": "Overlap Studies",
            "name": "MAVP",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close",
                "periods": "periods"
            },
            "parameters": {
                "minperiod": 2,
                "maxperiod": 30,
                "matype": 0
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MAVP": {
        "prototype": "TA_RetCode TA_S_MAVP( int startIdx, int endIdx, const float inReal[], const float inPeriods[], int optInMinPeriod, int optInMaxPeriod, TA_MAType optInMAType, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MAVP_Lookback": {
        "prototype": "int TA_MAVP_Lookback( int optInMinPeriod, int optInMaxPeriod, TA_MAType optInMAType );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MAX": {
        "prototype": "TA_RetCode TA_MAX( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Highest value over a specified period",
            "group": "Math Operators",
            "name": "MAX",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MAX": {
        "prototype": "TA_RetCode TA_S_MAX( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MAX_Lookback": {
        "prototype": "int TA_MAX_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MAXINDEX": {
        "prototype": "TA_RetCode TA_MAXINDEX( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Index of highest value over a specified period",
            "group": "Math Operators",
            "name": "MAXINDEX",
            "function_flags": null,
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MAXINDEX": {
        "prototype": "TA_RetCode TA_S_MAXINDEX( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MAXINDEX_Lookback": {
        "prototype": "int TA_MAXINDEX_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MEDPRICE": {
        "prototype": "TA_RetCode TA_MEDPRICE( int startIdx, int endIdx, const double inHigh[], const double inLow[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Median Price",
            "group": "Price Transform",
            "name": "MEDPRICE",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MEDPRICE": {
        "prototype": "TA_RetCode TA_S_MEDPRICE( int startIdx, int endIdx, const float inHigh[], const float inLow[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MEDPRICE_Lookback": {
        "prototype": "int TA_MEDPRICE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MFI": {
        "prototype": "TA_RetCode TA_MFI( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], const double inVolume[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Money Flow Index",
            "group": "Momentum Indicators",
            "name": "MFI",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close",
                    "volume"
                ]
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MFI": {
        "prototype": "TA_RetCode TA_S_MFI( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], const float inVolume[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MFI_Lookback": {
        "prototype": "int TA_MFI_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MIDPOINT": {
        "prototype": "TA_RetCode TA_MIDPOINT( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "MidPoint over period",
            "group": "Overlap Studies",
            "name": "MIDPOINT",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MIDPOINT": {
        "prototype": "TA_RetCode TA_S_MIDPOINT( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MIDPOINT_Lookback": {
        "prototype": "int TA_MIDPOINT_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MIDPRICE": {
        "prototype": "TA_RetCode TA_MIDPRICE( int startIdx, int endIdx, const double inHigh[], const double inLow[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Midpoint Price over period",
            "group": "Overlap Studies",
            "name": "MIDPRICE",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low"
                ]
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MIDPRICE": {
        "prototype": "TA_RetCode TA_S_MIDPRICE( int startIdx, int endIdx, const float inHigh[], const float inLow[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MIDPRICE_Lookback": {
        "prototype": "int TA_MIDPRICE_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MIN": {
        "prototype": "TA_RetCode TA_MIN( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Lowest value over a specified period",
            "group": "Math Operators",
            "name": "MIN",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MIN": {
        "prototype": "TA_RetCode TA_S_MIN( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MIN_Lookback": {
        "prototype": "int TA_MIN_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MININDEX": {
        "prototype": "TA_RetCode TA_MININDEX( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": false,
        "info": {
            "display_name": "Index of lowest value over a specified period",
            "group": "Math Operators",
            "name": "MININDEX",
            "function_flags": null,
            "output_flags": {
                "integer": [
                    "Line"
                ]
            },
            "output_names": [
                "integer"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MININDEX": {
        "prototype": "TA_RetCode TA_S_MININDEX( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, int outInteger[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MININDEX_Lookback": {
        "prototype": "int TA_MININDEX_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MINMAX": {
        "prototype": "TA_RetCode TA_MINMAX( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outMin[], double outMax[] );",
        "is_float": false,
        "info": {
            "display_name": "Lowest and highest values over a specified period",
            "group": "Math Operators",
            "name": "MINMAX",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "min": [
                    "Line"
                ],
                "max": [
                    "Line"
                ]
            },
            "output_names": [
                "min",
                "max"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MINMAX": {
        "prototype": "TA_RetCode TA_S_MINMAX( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outMin[], double outMax[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MINMAX_Lookback": {
        "prototype": "int TA_MINMAX_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MINMAXINDEX": {
        "prototype": "TA_RetCode TA_MINMAXINDEX( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, int outMinIdx[], int outMaxIdx[] );",
        "is_float": false,
        "info": {
            "display_name": "Indexes of lowest and highest values over a specified period",
            "group": "Math Operators",
            "name": "MINMAXINDEX",
            "function_flags": null,
            "output_flags": {
                "minidx": [
                    "Line"
                ],
                "maxidx": [
                    "Line"
                ]
            },
            "output_names": [
                "minidx",
                "maxidx"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MINMAXINDEX": {
        "prototype": "TA_RetCode TA_S_MINMAXINDEX( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, int outMinIdx[], int outMaxIdx[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MINMAXINDEX_Lookback": {
        "prototype": "int TA_MINMAXINDEX_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MINUS_DI": {
        "prototype": "TA_RetCode TA_MINUS_DI( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Minus Directional Indicator",
            "group": "Momentum Indicators",
            "name": "MINUS_DI",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MINUS_DI": {
        "prototype": "TA_RetCode TA_S_MINUS_DI( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MINUS_DI_Lookback": {
        "prototype": "int TA_MINUS_DI_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MINUS_DM": {
        "prototype": "TA_RetCode TA_MINUS_DM( int startIdx, int endIdx, const double inHigh[], const double inLow[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Minus Directional Movement",
            "group": "Momentum Indicators",
            "name": "MINUS_DM",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low"
                ]
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MINUS_DM": {
        "prototype": "TA_RetCode TA_S_MINUS_DM( int startIdx, int endIdx, const float inHigh[], const float inLow[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MINUS_DM_Lookback": {
        "prototype": "int TA_MINUS_DM_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MOM": {
        "prototype": "TA_RetCode TA_MOM( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Momentum",
            "group": "Momentum Indicators",
            "name": "MOM",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 10
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MOM": {
        "prototype": "TA_RetCode TA_S_MOM( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MOM_Lookback": {
        "prototype": "int TA_MOM_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "MULT": {
        "prototype": "TA_RetCode TA_MULT( int startIdx, int endIdx, const double inReal0[], const double inReal1[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Arithmetic Mult",
            "group": "Math Operators",
            "name": "MULT",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price0": "high",
                "price1": "low"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_MULT": {
        "prototype": "TA_RetCode TA_S_MULT( int startIdx, int endIdx, const float inReal0[], const float inReal1[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "MULT_Lookback": {
        "prototype": "int TA_MULT_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "NATR": {
        "prototype": "TA_RetCode TA_NATR( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Normalized Average True Range",
            "group": "Volatility Indicators",
            "name": "NATR",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_NATR": {
        "prototype": "TA_RetCode TA_S_NATR( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "NATR_Lookback": {
        "prototype": "int TA_NATR_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "OBV": {
        "prototype": "TA_RetCode TA_OBV( int startIdx, int endIdx, const double inReal[], const double inVolume[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "On Balance Volume",
            "group": "Volume Indicators",
            "name": "OBV",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close",
                "prices": [
                    "volume"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_OBV": {
        "prototype": "TA_RetCode TA_S_OBV( int startIdx, int endIdx, const float inReal[], const float inVolume[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "OBV_Lookback": {
        "prototype": "int TA_OBV_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "PLUS_DI": {
        "prototype": "TA_RetCode TA_PLUS_DI( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Plus Directional Indicator",
            "group": "Momentum Indicators",
            "name": "PLUS_DI",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_PLUS_DI": {
        "prototype": "TA_RetCode TA_S_PLUS_DI( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "PLUS_DI_Lookback": {
        "prototype": "int TA_PLUS_DI_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "PLUS_DM": {
        "prototype": "TA_RetCode TA_PLUS_DM( int startIdx, int endIdx, const double inHigh[], const double inLow[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Plus Directional Movement",
            "group": "Momentum Indicators",
            "name": "PLUS_DM",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low"
                ]
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_PLUS_DM": {
        "prototype": "TA_RetCode TA_S_PLUS_DM( int startIdx, int endIdx, const float inHigh[], const float inLow[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "PLUS_DM_Lookback": {
        "prototype": "int TA_PLUS_DM_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "PPO": {
        "prototype": "TA_RetCode TA_PPO( int startIdx, int endIdx, const double inReal[], int optInFastPeriod, int optInSlowPeriod, TA_MAType optInMAType, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Percentage Price Oscillator",
            "group": "Momentum Indicators",
            "name": "PPO",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "fastperiod": 12,
                "slowperiod": 26,
                "matype": 0
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_PPO": {
        "prototype": "TA_RetCode TA_S_PPO( int startIdx, int endIdx, const float inReal[], int optInFastPeriod, int optInSlowPeriod, TA_MAType optInMAType, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "PPO_Lookback": {
        "prototype": "int TA_PPO_Lookback( int optInFastPeriod, int optInSlowPeriod, TA_MAType optInMAType );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "ROC": {
        "prototype": "TA_RetCode TA_ROC( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Rate of change : ((price/prevPrice)-1)*100",
            "group": "Momentum Indicators",
            "name": "ROC",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 10
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_ROC": {
        "prototype": "TA_RetCode TA_S_ROC( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "ROC_Lookback": {
        "prototype": "int TA_ROC_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "ROCP": {
        "prototype": "TA_RetCode TA_ROCP( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Rate of change Percentage: (price-prevPrice)/prevPrice",
            "group": "Momentum Indicators",
            "name": "ROCP",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 10
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_ROCP": {
        "prototype": "TA_RetCode TA_S_ROCP( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "ROCP_Lookback": {
        "prototype": "int TA_ROCP_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "ROCR": {
        "prototype": "TA_RetCode TA_ROCR( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Rate of change ratio: (price/prevPrice)",
            "group": "Momentum Indicators",
            "name": "ROCR",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 10
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_ROCR": {
        "prototype": "TA_RetCode TA_S_ROCR( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "ROCR_Lookback": {
        "prototype": "int TA_ROCR_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "ROCR100": {
        "prototype": "TA_RetCode TA_ROCR100( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Rate of change ratio 100 scale: (price/prevPrice)*100",
            "group": "Momentum Indicators",
            "name": "ROCR100",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 10
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_ROCR100": {
        "prototype": "TA_RetCode TA_S_ROCR100( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "ROCR100_Lookback": {
        "prototype": "int TA_ROCR100_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "RSI": {
        "prototype": "TA_RetCode TA_RSI( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Relative Strength Index",
            "group": "Momentum Indicators",
            "name": "RSI",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_RSI": {
        "prototype": "TA_RetCode TA_S_RSI( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "RSI_Lookback": {
        "prototype": "int TA_RSI_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "SAR": {
        "prototype": "TA_RetCode TA_SAR( int startIdx, int endIdx, const double inHigh[], const double inLow[], double optInAcceleration, double optInMaximum, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Parabolic SAR",
            "group": "Overlap Studies",
            "name": "SAR",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low"
                ]
            },
            "parameters": {
                "acceleration": 0.02,
                "maximum": 0.2
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_SAR": {
        "prototype": "TA_RetCode TA_S_SAR( int startIdx, int endIdx, const float inHigh[], const float inLow[], double optInAcceleration, double optInMaximum, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "SAR_Lookback": {
        "prototype": "int TA_SAR_Lookback( double optInAcceleration, double optInMaximum );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "SAREXT": {
        "prototype": "TA_RetCode TA_SAREXT( int startIdx, int endIdx, const double inHigh[], const double inLow[], double optInStartValue, double optInOffsetOnReverse, double optInAccelerationInitLong, double optInAccelerationLong, double optInAccelerationMaxLong, double optInAccelerationInitShort, double optInAccelerationShort, double optInAccelerationMaxShort, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Parabolic SAR - Extended",
            "group": "Overlap Studies",
            "name": "SAREXT",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low"
                ]
            },
            "parameters": {
                "startvalue": 0,
                "offsetonreverse": 0,
                "accelerationinitlong": 0.02,
                "accelerationlong": 0.02,
                "accelerationmaxlong": 0.2,
                "accelerationinitshort": 0.02,
                "accelerationshort": 0.02,
                "accelerationmaxshort": 0.2
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_SAREXT": {
        "prototype": "TA_RetCode TA_S_SAREXT( int startIdx, int endIdx, const float inHigh[], const float inLow[], double optInStartValue, double optInOffsetOnReverse, double optInAccelerationInitLong, double optInAccelerationLong, double optInAccelerationMaxLong, double optInAccelerationInitShort, double optInAccelerationShort, double optInAccelerationMaxShort, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "SAREXT_Lookback": {
        "prototype": "int TA_SAREXT_Lookback( double optInStartValue, double optInOffsetOnReverse, double optInAccelerationInitLong, double optInAccelerationLong, double optInAccelerationMaxLong, double optInAccelerationInitShort, double optInAccelerationShort, double optInAccelerationMaxShort );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "SIN": {
        "prototype": "TA_RetCode TA_SIN( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Trigonometric Sin",
            "group": "Math Transform",
            "name": "SIN",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_SIN": {
        "prototype": "TA_RetCode TA_S_SIN( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "SIN_Lookback": {
        "prototype": "int TA_SIN_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "SINH": {
        "prototype": "TA_RetCode TA_SINH( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Trigonometric Sinh",
            "group": "Math Transform",
            "name": "SINH",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_SINH": {
        "prototype": "TA_RetCode TA_S_SINH( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "SINH_Lookback": {
        "prototype": "int TA_SINH_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "SMA": {
        "prototype": "TA_RetCode TA_SMA( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Simple Moving Average",
            "group": "Overlap Studies",
            "name": "SMA",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_SMA": {
        "prototype": "TA_RetCode TA_S_SMA( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "SMA_Lookback": {
        "prototype": "int TA_SMA_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "SQRT": {
        "prototype": "TA_RetCode TA_SQRT( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Square Root",
            "group": "Math Transform",
            "name": "SQRT",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_SQRT": {
        "prototype": "TA_RetCode TA_S_SQRT( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "SQRT_Lookback": {
        "prototype": "int TA_SQRT_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "STDDEV": {
        "prototype": "TA_RetCode TA_STDDEV( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, double optInNbDev, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Standard Deviation",
            "group": "Statistic Functions",
            "name": "STDDEV",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 5,
                "nbdev": 1
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_STDDEV": {
        "prototype": "TA_RetCode TA_S_STDDEV( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, double optInNbDev, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "STDDEV_Lookback": {
        "prototype": "int TA_STDDEV_Lookback( int optInTimePeriod, double optInNbDev );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "STOCH": {
        "prototype": "TA_RetCode TA_STOCH( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], int optInFastK_Period, int optInSlowK_Period, TA_MAType optInSlowK_MAType, int optInSlowD_Period, TA_MAType optInSlowD_MAType, int *outBegIdx, int *outNBElement, double outSlowK[], double outSlowD[] );",
        "is_float": false,
        "info": {
            "display_name": "Stochastic",
            "group": "Momentum Indicators",
            "name": "STOCH",
            "function_flags": null,
            "output_flags": {
                "slowk": [
                    "Dashed Line"
                ],
                "slowd": [
                    "Dashed Line"
                ]
            },
            "output_names": [
                "slowk",
                "slowd"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "fastk_period": 5,
                "slowk_period": 3,
                "slowk_matype": 0,
                "slowd_period": 3,
                "slowd_matype": 0
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_STOCH": {
        "prototype": "TA_RetCode TA_S_STOCH( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], int optInFastK_Period, int optInSlowK_Period, TA_MAType optInSlowK_MAType, int optInSlowD_Period, TA_MAType optInSlowD_MAType, int *outBegIdx, int *outNBElement, double outSlowK[], double outSlowD[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "STOCH_Lookback": {
        "prototype": "int TA_STOCH_Lookback( int optInFastK_Period, int optInSlowK_Period, TA_MAType optInSlowK_MAType, int optInSlowD_Period, TA_MAType optInSlowD_MAType );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "STOCHF": {
        "prototype": "TA_RetCode TA_STOCHF( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], int optInFastK_Period, int optInFastD_Period, TA_MAType optInFastD_MAType, int *outBegIdx, int *outNBElement, double outFastK[], double outFastD[] );",
        "is_float": false,
        "info": {
            "display_name": "Stochastic Fast",
            "group": "Momentum Indicators",
            "name": "STOCHF",
            "function_flags": null,
            "output_flags": {
                "fastk": [
                    "Line"
                ],
                "fastd": [
                    "Line"
                ]
            },
            "output_names": [
                "fastk",
                "fastd"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "fastk_period": 5,
                "fastd_period": 3,
                "fastd_matype": 0
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_STOCHF": {
        "prototype": "TA_RetCode TA_S_STOCHF( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], int optInFastK_Period, int optInFastD_Period, TA_MAType optInFastD_MAType, int *outBegIdx, int *outNBElement, double outFastK[], double outFastD[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "STOCHF_Lookback": {
        "prototype": "int TA_STOCHF_Lookback( int optInFastK_Period, int optInFastD_Period, TA_MAType optInFastD_MAType );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "STOCHRSI": {
        "prototype": "TA_RetCode TA_STOCHRSI( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int optInFastK_Period, int optInFastD_Period, TA_MAType optInFastD_MAType, int *outBegIdx, int *outNBElement, double outFastK[], double outFastD[] );",
        "is_float": false,
        "info": {
            "display_name": "Stochastic Relative Strength Index",
            "group": "Momentum Indicators",
            "name": "STOCHRSI",
            "function_flags": [
                "Function has an unstable period"
            ],
            "output_flags": {
                "fastk": [
                    "Line"
                ],
                "fastd": [
                    "Line"
                ]
            },
            "output_names": [
                "fastk",
                "fastd"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 14,
                "fastk_period": 5,
                "fastd_period": 3,
                "fastd_matype": 0
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_STOCHRSI": {
        "prototype": "TA_RetCode TA_S_STOCHRSI( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int optInFastK_Period, int optInFastD_Period, TA_MAType optInFastD_MAType, int *outBegIdx, int *outNBElement, double outFastK[], double outFastD[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "STOCHRSI_Lookback": {
        "prototype": "int TA_STOCHRSI_Lookback( int optInTimePeriod, int optInFastK_Period, int optInFastD_Period, TA_MAType optInFastD_MAType );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "SUB": {
        "prototype": "TA_RetCode TA_SUB( int startIdx, int endIdx, const double inReal0[], const double inReal1[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Arithmetic Substraction",
            "group": "Math Operators",
            "name": "SUB",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price0": "high",
                "price1": "low"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_SUB": {
        "prototype": "TA_RetCode TA_S_SUB( int startIdx, int endIdx, const float inReal0[], const float inReal1[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "SUB_Lookback": {
        "prototype": "int TA_SUB_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "SUM": {
        "prototype": "TA_RetCode TA_SUM( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Summation",
            "group": "Math Operators",
            "name": "SUM",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_SUM": {
        "prototype": "TA_RetCode TA_S_SUM( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "SUM_Lookback": {
        "prototype": "int TA_SUM_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "T3": {
        "prototype": "TA_RetCode TA_T3( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, double optInVFactor, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Triple Exponential Moving Average (T3)",
            "group": "Overlap Studies",
            "name": "T3",
            "function_flags": [
                "Output scale same as input",
                "Function has an unstable period"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 5,
                "vfactor": 0.7
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_T3": {
        "prototype": "TA_RetCode TA_S_T3( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, double optInVFactor, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "T3_Lookback": {
        "prototype": "int TA_T3_Lookback( int optInTimePeriod, double optInVFactor );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "TAN": {
        "prototype": "TA_RetCode TA_TAN( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Trigonometric Tan",
            "group": "Math Transform",
            "name": "TAN",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_TAN": {
        "prototype": "TA_RetCode TA_S_TAN( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "TAN_Lookback": {
        "prototype": "int TA_TAN_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "TANH": {
        "prototype": "TA_RetCode TA_TANH( int startIdx, int endIdx, const double inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Vector Trigonometric Tanh",
            "group": "Math Transform",
            "name": "TANH",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_TANH": {
        "prototype": "TA_RetCode TA_S_TANH( int startIdx, int endIdx, const float inReal[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "TANH_Lookback": {
        "prototype": "int TA_TANH_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "TEMA": {
        "prototype": "TA_RetCode TA_TEMA( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Triple Exponential Moving Average",
            "group": "Overlap Studies",
            "name": "TEMA",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_TEMA": {
        "prototype": "TA_RetCode TA_S_TEMA( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "TEMA_Lookback": {
        "prototype": "int TA_TEMA_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "TRANGE": {
        "prototype": "TA_RetCode TA_TRANGE( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "True Range",
            "group": "Volatility Indicators",
            "name": "TRANGE",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_TRANGE": {
        "prototype": "TA_RetCode TA_S_TRANGE( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "TRANGE_Lookback": {
        "prototype": "int TA_TRANGE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "TRIMA": {
        "prototype": "TA_RetCode TA_TRIMA( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Triangular Moving Average",
            "group": "Overlap Studies",
            "name": "TRIMA",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_TRIMA": {
        "prototype": "TA_RetCode TA_S_TRIMA( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "TRIMA_Lookback": {
        "prototype": "int TA_TRIMA_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "TRIX": {
        "prototype": "TA_RetCode TA_TRIX( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "1-day Rate-Of-Change (ROC) of a Triple Smooth EMA",
            "group": "Momentum Indicators",
            "name": "TRIX",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_TRIX": {
        "prototype": "TA_RetCode TA_S_TRIX( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "TRIX_Lookback": {
        "prototype": "int TA_TRIX_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "TSF": {
        "prototype": "TA_RetCode TA_TSF( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Time Series Forecast",
            "group": "Statistic Functions",
            "name": "TSF",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_TSF": {
        "prototype": "TA_RetCode TA_S_TSF( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "TSF_Lookback": {
        "prototype": "int TA_TSF_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "TYPPRICE": {
        "prototype": "TA_RetCode TA_TYPPRICE( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Typical Price",
            "group": "Price Transform",
            "name": "TYPPRICE",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_TYPPRICE": {
        "prototype": "TA_RetCode TA_S_TYPPRICE( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "TYPPRICE_Lookback": {
        "prototype": "int TA_TYPPRICE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "ULTOSC": {
        "prototype": "TA_RetCode TA_ULTOSC( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], int optInTimePeriod1, int optInTimePeriod2, int optInTimePeriod3, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Ultimate Oscillator",
            "group": "Momentum Indicators",
            "name": "ULTOSC",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "timeperiod1": 7,
                "timeperiod2": 14,
                "timeperiod3": 28
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_ULTOSC": {
        "prototype": "TA_RetCode TA_S_ULTOSC( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], int optInTimePeriod1, int optInTimePeriod2, int optInTimePeriod3, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "ULTOSC_Lookback": {
        "prototype": "int TA_ULTOSC_Lookback( int optInTimePeriod1, int optInTimePeriod2, int optInTimePeriod3 );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "VAR": {
        "prototype": "TA_RetCode TA_VAR( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, double optInNbDev, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Variance",
            "group": "Statistic Functions",
            "name": "VAR",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 5,
                "nbdev": 1
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_VAR": {
        "prototype": "TA_RetCode TA_S_VAR( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, double optInNbDev, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "VAR_Lookback": {
        "prototype": "int TA_VAR_Lookback( int optInTimePeriod, double optInNbDev );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "WCLPRICE": {
        "prototype": "TA_RetCode TA_WCLPRICE( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Weighted Close Price",
            "group": "Price Transform",
            "name": "WCLPRICE",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {}
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_WCLPRICE": {
        "prototype": "TA_RetCode TA_S_WCLPRICE( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "WCLPRICE_Lookback": {
        "prototype": "int TA_WCLPRICE_Lookback( void );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "WILLR": {
        "prototype": "TA_RetCode TA_WILLR( int startIdx, int endIdx, const double inHigh[], const double inLow[], const double inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Williams' %R",
            "group": "Momentum Indicators",
            "name": "WILLR",
            "function_flags": null,
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "prices": [
                    "high",
                    "low",
                    "close"
                ]
            },
            "parameters": {
                "timeperiod": 14
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_WILLR": {
        "prototype": "TA_RetCode TA_S_WILLR( int startIdx, int endIdx, const float inHigh[], const float inLow[], const float inClose[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "WILLR_Lookback": {
        "prototype": "int TA_WILLR_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "WMA": {
        "prototype": "TA_RetCode TA_WMA( int startIdx, int endIdx, const double inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": false,
        "info": {
            "display_name": "Weighted Moving Average",
            "group": "Overlap Studies",
            "name": "WMA",
            "function_flags": [
                "Output scale same as input"
            ],
            "output_flags": {
                "real": [
                    "Line"
                ]
            },
            "output_names": [
                "real"
            ],
            "input_names": {
                "price": "close"
            },
            "parameters": {
                "timeperiod": 30
            }
        },
        "is_indicator": true,
        "is_lookback": false
    },
    "S_WMA": {
        "prototype": "TA_RetCode TA_S_WMA( int startIdx, int endIdx, const float inReal[], int optInTimePeriod, int *outBegIdx, int *outNBElement, double outReal[] );",
        "is_float": true,
        "info": {},
        "is_indicator": true,
        "is_lookback": false
    },
    "WMA_Lookback": {
        "prototype": "int TA_WMA_Lookback( int optInTimePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": true,
        "is_lookback": true
    },
    "SetUnstablePeriod": {
        "prototype": "TA_RetCode TA_SetUnstablePeriod( TA_FuncUnstId id, unsigned int unstablePeriod );",
        "is_float": false,
        "info": {},
        "is_indicator": false,
        "is_lookback": false
    },
    "SetCompatibility": {
        "prototype": "TA_RetCode TA_SetCompatibility( TA_Compatibility value ); TA_Compatibility TA_GetCompatibility( void );",
        "is_float": false,
        "info": {},
        "is_indicator": false,
        "is_lookback": false
    },
    "SetCandleSettings": {
        "prototype": "TA_RetCode TA_SetCandleSettings( TA_CandleSettingType settingType, TA_RangeType rangeType, int avgPeriod, double factor );",
        "is_float": false,
        "info": {},
        "is_indicator": false,
        "is_lookback": false
    },
    "RestoreCandleDefaultSettings": {
        "prototype": "TA_RetCode TA_RestoreCandleDefaultSettings( TA_CandleSettingType settingType );",
        "is_float": false,
        "info": {},
        "is_indicator": false,
        "is_lookback": false
    }
}